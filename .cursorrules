# Cursor AI 코딩 규칙

이 파일은 Cursor AI가 코드를 작성할 때 따라야 할 규칙들을 정의합니다.

## 📋 코딩 가이드라인 참조
- **CODING_GUIDELINES.md** 파일을 반드시 참조하여 코딩 표준을 준수하세요.
- 모든 코드 작성 시 해당 가이드라인의 원칙을 적용하세요.

## 🎯 자동 적용 원칙

### 1. 전체적인 구조 고려
- 컴포넌트 분리: 단일 책임 원칙 적용
- 데이터 흐름: props drilling 최소화, 상태 관리 최적화
- 에러 처리: 모든 비동기 작업에 적절한 에러 처리
- 로딩 상태: 사용자 경험을 위한 로딩 상태 관리
- 상태 동기화: 의존성이 있는 데이터의 로딩 순서 고려

### 2. 잠재적 문제 예방
- 타입 안전성: TypeScript 타입 정의 철저히
- RLS 정책: Supabase RLS 정책과 일치하는 데이터 접근
- 인증 상태: 로그인/비로그인 사용자 모두 고려
- 반응형 디자인: 모바일/데스크톱 모두 고려
- 국제화: 모든 텍스트는 번역 키 사용

### 3. 글로벌 스타일 활용
- Tailwind CSS: 기존 유틸리티 클래스 우선 사용
- 컴포넌트 재사용: 기존 UI 컴포넌트 최대한 활용
- 일관된 스타일: 기존 디자인 시스템과 일치
- 반응형: `sm:`, `md:`, `lg:` 브레이크포인트 활용

### 4. 코드 품질
- 명확한 네이밍: 변수/함수명이 의도를 명확히 표현
- 주석: 복잡한 로직에 적절한 주석
- 에러 메시지: 사용자 친화적인 에러 메시지
- 성능: 불필요한 리렌더링 방지

## 🚫 금지사항
- 하드코딩된 텍스트 사용 금지 (번역 키 사용)
- `any` 타입 사용 금지
- 에러 처리 없는 비동기 작업 금지
- 인라인 스타일 사용 금지 (Tailwind CSS 사용)
- 기존 컴포넌트 무시하고 새로 만들기 금지
- 중복된 useEffect로 인한 데이터 중복 호출 금지
- 의존성 배열 없는 useEffect 사용 금지

## ✅ 필수사항
- 모든 props와 state에 TypeScript 타입 정의
- 모든 비동기 작업에 try-catch 에러 처리
- 모든 사용자 입력에 적절한 검증
- 모든 텍스트에 번역 키 사용
- 모바일/데스크톱 반응형 디자인 적용
- useEffect 의존성 배열 정확히 설정
- 의존성이 있는 데이터는 로딩 순서 고려
- 라우트 이동과 새로고침에서 일관된 상태 보장

## 🔍 코드 검증
코드 작성 후 다음을 확인하세요:
1. TypeScript 타입 에러 없음
2. ESLint 에러 없음
3. 번역 키 사용 확인
4. 반응형 디자인 적용 확인
5. 에러 처리 완료 확인
6. 기존 컴포넌트 재사용 확인
7. useEffect 의존성 배열 정확성 확인
8. 중복 데이터 호출 방지 확인
9. 상태 동기화 일관성 확인

## 📚 프로젝트 컨텍스트
- Next.js 14 App Router
- Supabase 인증 및 데이터베이스
- Tailwind CSS 스타일링
- TypeScript 타입 안전성
- next-intl 국제화
- 반응형 모바일 우선 디자인

이 규칙들을 자동으로 적용하여 일관되고 품질 높은 코드를 작성하세요.
